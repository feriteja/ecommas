// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Product {
  id                     String                 @id @default(uuid())
  name                   String
  priceInCents           Int
  filePath               String
  imagePath              String
  description            String
  isAvailableForPurchase Boolean                @default(true)
  createdAt              DateTime               @default(now())
  updateAt               DateTime               @updatedAt
  orders                 Order[]
  downloadVerification   DownloadVerification[]
  CartItem               CartItem[]
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  orders    Order[]
  Auth      Auth?
  Cart      Cart?
  Profile   Profile?
}

model Order {
  id               String   @id @default(uuid())
  pricePaidInCents Int
  createdAt        DateTime @default(now())
  updateAt         DateTime @updatedAt
  userId           String
  productId        String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product          Product  @relation(fields: [productId], references: [id], onDelete: Restrict)
}

model DownloadVerification {
  id        String   @id @default(uuid())
  expiresAt DateTime
  createdAt DateTime @default(now())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Profile {
  id               String  @id @default(uuid())
  name             String?
  phoneNumber      String?
  photoProfilePath String?
  userId           String  @unique
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Auth {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  email     String   @unique
  password  String
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Cart {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]

  // Optional: You can add additional fields like total price, status, etc.
}

model CartItem {
  id        String   @id @default(uuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  cart      Cart     @relation(fields: [cartId], references: [id])
}
